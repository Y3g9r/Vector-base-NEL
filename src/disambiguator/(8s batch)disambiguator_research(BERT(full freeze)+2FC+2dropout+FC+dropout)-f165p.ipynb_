{"cells":[{"cell_type":"code","execution_count":1,"id":"DI09IyB3lY7h","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23654,"status":"ok","timestamp":1677234234463,"user":{"displayName":"y3g0r k","userId":"03339002915347279062"},"user_tz":-180},"id":"DI09IyB3lY7h","outputId":"f85c760b-4209-455c-bae0-3143fc76e5e0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers\n","  Downloading transformers-4.26.1-py3-none-any.whl (6.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.3/6.3 MB\u001b[0m \u001b[31m26.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.8/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.8/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.8/dist-packages (from transformers) (23.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (from transformers) (2.25.1)\n","Collecting tokenizers!=0.11.3,<0.14,>=0.11.1\n","  Downloading tokenizers-0.13.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.6/7.6 MB\u001b[0m \u001b[31m75.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.8/dist-packages (from transformers) (1.22.4)\n","Collecting huggingface-hub<1.0,>=0.11.0\n","  Downloading huggingface_hub-0.12.1-py3-none-any.whl (190 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m190.3/190.3 KB\u001b[0m \u001b[31m11.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.8/dist-packages (from transformers) (3.9.0)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.8/dist-packages (from transformers) (4.64.1)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.8/dist-packages (from huggingface-hub<1.0,>=0.11.0->transformers) (4.5.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (2022.12.7)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (4.0.0)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (1.24.3)\n","Installing collected packages: tokenizers, huggingface-hub, transformers\n","Successfully installed huggingface-hub-0.12.1 tokenizers-0.13.2 transformers-4.26.1\n"]}],"source":["!pip install transformers"]},{"cell_type":"code","execution_count":2,"id":"10309577","metadata":{"executionInfo":{"elapsed":10685,"status":"ok","timestamp":1677234252886,"user":{"displayName":"y3g0r k","userId":"03339002915347279062"},"user_tz":-180},"id":"10309577","scrolled":true},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","from torch.utils.data import  Dataset\n","from torch.utils.data import DataLoader\n","from transformers import BertTokenizerFast, BertModel\n","import torch.optim as optim\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","import ast\n","import datetime as dt\n","import gc"]},{"cell_type":"markdown","id":"760be49e","metadata":{"id":"760be49e"},"source":["# Обучение модели"]},{"cell_type":"code","execution_count":3,"id":"7bb0542d","metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1677234252887,"user":{"displayName":"y3g0r k","userId":"03339002915347279062"},"user_tz":-180},"id":"7bb0542d"},"outputs":[],"source":["class DisambiguationDataset(Dataset):\n","    def __init__(self, samples,labels):\n","        self.samples = samples\n","        self.labels = labels\n","        self.len = len(self.samples)\n","\n","    def __len__(self):\n","        return self.len\n","\n","    def __getitem__(self, index):\n","        items = {\"text_input_ids\": torch.tensor(self.samples[index][0]),\n","                 \"text_input_mask\": torch.tensor(self.samples[index][1]),\n","                 \"text_segment_ids\": torch.tensor(self.samples[index][2]),\n","                 \"text_offset_mapping\": torch.tensor(self.samples[index][3]),\n","                 \"text_pos\": torch.tensor(self.samples[index][4]),\n","                 \"def_input_ids\": torch.tensor(self.samples[index][5]),\n","                 \"def_input_mask\": torch.tensor(self.samples[index][6]),\n","                 \"def_segment_ids\": torch.tensor(self.samples[index][7]),\n","                 \"label\": torch.tensor(self.labels[index])}\n","        return items"]},{"cell_type":"code","execution_count":4,"id":"269a9166","metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1677234252887,"user":{"displayName":"y3g0r k","userId":"03339002915347279062"},"user_tz":-180},"id":"269a9166"},"outputs":[],"source":["class NerualNet(nn.Module):\n","    def __init__(self, hidden_size=768, max_seq_len=388, device='cpu'):\n","        self.device = device\n","        super(NerualNet, self).__init__()\n","        self.bert = BertModel.from_pretrained('sberbank-ai/sbert_large_mt_nlu_ru', output_hidden_states=True,\n","                                              return_dict=False)\n","        for layer in self.bert.encoder.layer:\n","            for param in layer.parameters():\n","                param.requires_grad = False\n","\n","        self.text_linear_1 = torch.nn.Linear(1024, max_seq_len)\n","        self.def_linear_1 = torch.nn.Linear(1024, max_seq_len)\n","\n","        self.Dropout_text_1 = torch.nn.Dropout(0.5)\n","        self.Dropout_def_1 = torch.nn.Dropout(0.5)\n","\n","        self.text_linear_2 = torch.nn.Linear(max_seq_len, max_seq_len)\n","        self.def_linear_2 = torch.nn.Linear(max_seq_len, max_seq_len)\n","\n","        self.Dropout_text_2 = torch.nn.Dropout(0.5)\n","        self.Dropout_def_2 = torch.nn.Dropout(0.5)\n","        \n","        self.sigm_linear_1 = torch.nn.Linear(max_seq_len, 1)\n","        self.Dropout_sigm = torch.nn.Dropout(0.5)\n","        self.sigmoid = nn.Sigmoid()\n","\n","    def forward(self, text_input_ids, text_input_mask, text_segment_ids, text_offset_mapping,\n","                text_pos, def_input_ids, def_input_mask, def_segment_ids):\n","\n","        embd_batch = torch.tensor([[[], []]]).to(self.device)\n","        first_pass = False\n","        for i in range(len(text_input_ids)):\n","            # получаем эмбединги ключевого слова из примера употребления\n","            examples_token_key_word_position = self.token_detection(text_offset_mapping[i], text_pos[i][0])\n","            example_token_vec = self.get_vector(text_input_ids[i], text_segment_ids[i], text_input_mask[i])\n","            example_embeddings = self.vector_recognition(example_token_vec, examples_token_key_word_position)\n","\n","            # получаем эмбединг определения\n","            def_embedding = self.get_defenition_embedding(def_input_ids[i], def_segment_ids[i],\n","                                                          def_input_mask[i]).squeeze(0)\n","            # объединяем два вектора в 1 и добавляем в общий массив (получаем тензор 2x768)\n","            embd_sample = torch.stack((example_embeddings, def_embedding)).to(self.device)\n","            if not first_pass:\n","                embd_batch = torch.cat((embd_batch, embd_sample.unsqueeze(0)), -1)\n","                first_pass = True\n","            else:\n","                embd_batch = torch.cat((embd_batch, embd_sample.unsqueeze(0)), 0)\n","\n","                \n","        text_emb = embd_batch[:, 0, :]\n","        def_emb = embd_batch[:, 1, :]\n","\n","        ex_emb =  self.Dropout_text_2(self.text_linear_2(self.Dropout_text_1(self.text_linear_1(text_emb))))\n","        def_emb = self.Dropout_def_2(self.def_linear_2(self.Dropout_def_1(self.def_linear_1(def_emb))))\n","\n","        dist = torch.abs(ex_emb-def_emb)\n","        py = self.Dropout_sigm(self.sigm_linear_1(dist))\n","\n","        y = self.sigmoid(py).permute(1,0).squeeze(0)\n","\n","        return y\n","\n","    def get_defenition_embedding(self, def_input_ids, def_segment_ids, def_input_mask):\n","        \"\"\"\n","        Функция получения вектора дефенишина сущности\n","        :param def_input_ids:\n","        :param def_segment_ids:\n","        :param def_input_mask:\n","        :return: bert pooler output vector\n","        \"\"\"\n","        with torch.no_grad():\n","            output = self.bert(input_ids=def_input_ids.unsqueeze(0), token_type_ids=def_segment_ids.unsqueeze(0),\n","                               attention_mask=def_input_mask.unsqueeze(0))\n","        hidden_states = output[1]\n","        return hidden_states\n","\n","    def token_detection(self, token_map, position):\n","        \"\"\"\n","        Функция определения ключевого слова\n","        :param token_map: list of tuples of begin and end of every token\n","        :param position:  list of type: [int,int]\n","        :return: list of key word tokens position\n","        \"\"\"\n","        # из за того что в начале стоит CLS позиции начала и конца ключевого слова сдвигаются на 5\n","        begin_postion = position[0]  # + 5\n","        end_position = position[1]  # + 5\n","\n","        position_of_key_tokens = []\n","        for token_tuple in range(1, len(token_map) - 1):\n","            # Если ключевое слово представляется одним токеном\n","            if token_map[token_tuple][0] == begin_postion and token_map[token_tuple][1] == end_position:\n","                position_of_key_tokens.append(token_tuple)\n","                break\n","\n","            # Если ключевое слово представляется несколькими токенами\n","            if token_map[token_tuple][0] >= begin_postion and token_map[token_tuple][1] != end_position:\n","                position_of_key_tokens.append(token_tuple)\n","            if token_map[token_tuple][0] != begin_postion and token_map[token_tuple][1] == end_position:\n","                position_of_key_tokens.append(token_tuple)\n","                break\n","\n","        return position_of_key_tokens\n","\n","    def get_vector(self, input_ids_samp, token_type_ids_samp, attention_mask_samp):\n","        \"\"\"\n","        Функция получения вектора ключевого слова\n","        :param input_ids_samp:\n","        :param token_type_ids_samp:\n","        :param attention_mask_samp:\n","        :return:\n","        \"\"\"\n","        with torch.no_grad():\n","            outputs = self.bert(input_ids=input_ids_samp.unsqueeze(0), token_type_ids=token_type_ids_samp.unsqueeze(0),\n","                                attention_mask=attention_mask_samp.unsqueeze(0))\n","        hidden_states = outputs[2]\n","\n","        # из [# layers, # batches, # tokens, # features]\n","        # в [# tokens, # layers, # features]\n","        token_dim = torch.stack(hidden_states, dim=0)\n","        token_dim = torch.squeeze(token_dim, dim=1)\n","        token_dim = token_dim.permute(1, 0, 2)\n","        token_vecs_cat = []\n","        for token in token_dim:\n","            cat_vec = torch.sum(token[-4:], dim=0)\n","            token_vecs_cat.append(cat_vec)\n","        return token_vecs_cat\n","\n","\n","    def vector_recognition(self, tokens_embeddings_ex, tokens_key_word_position_ex):\n","        \"\"\"\n","        Функция подготовки вектора в зависимости от количества токенов,которым представляется ключевое слово\n","        :param tokens_embeddings_ex:\n","        :param tokens_key_word_position_ex:\n","        :return:\n","        \"\"\"\n","        if len(tokens_key_word_position_ex) > 1:\n","            embeddings_data = torch.tensor(\n","                self.__get_avarage_embedding(tokens_embeddings_ex, tokens_key_word_position_ex))\n","        else:\n","            embeddings_data = torch.tensor(tokens_embeddings_ex[tokens_key_word_position_ex[0]])\n","        return embeddings_data\n","\n","    def __get_avarage_embedding(self, embeddings_list, positions_list):\n","        \"\"\"\n","        Функция получения среднего вектора (применяется в случае если ключевое слово состоит из нескольких токенов)\n","        :param embeddings_list:\n","        :param positions_list:\n","        :return:\n","        \"\"\"\n","        avg_tensor = torch.stack((embeddings_list[positions_list[0]],))\n","        for i in range(1, len(positions_list)):\n","            avg_tensor = torch.cat((avg_tensor, embeddings_list[positions_list[i]].unsqueeze(0)))\n","\n","        average_embedding = torch.mean(avg_tensor, 0)\n","        return average_embedding"]},{"cell_type":"code","execution_count":5,"id":"c66ce6fd","metadata":{"executionInfo":{"elapsed":325,"status":"ok","timestamp":1677234257603,"user":{"displayName":"y3g0r k","userId":"03339002915347279062"},"user_tz":-180},"id":"c66ce6fd"},"outputs":[],"source":["class Trainer():\n","    def __init__(self, num_epochs=None, batch_size=None,\n","                 max_batches_per_epoch=None, early_stopping=10,\n","                 loss_fn=None, optimizer=None, model=None,\n","                 scheduler=None, device='cpu'):\n","        self.num_epochs = num_epochs\n","        self.batch_size = batch_size\n","        self.max_batches_per_epoch = max_batches_per_epoch\n","        self.early_stopping = early_stopping\n","        self.loss_fn = loss_fn\n","        self.device = device\n","        self.optimizer = optimizer\n","        self.scheduler = scheduler\n","        self.start_model = model\n","        self.best_model = model\n","\n","        self.train_loss = []\n","        self.valid_loss = []\n","\n","    def predict(self, input_ids, input_mask, segment_ids):\n","        return self.best_model(input_ids, input_mask, segment_ids)\n","\n","    def save_model(self, path: str):\n","        try:\n","            torch.save(self.best_model, path)\n","        except Exception as e:\n","            print(f\"Не удалось сохранить модель. Ошибка {e}\")\n","            exit(1)\n","\n","        return True\n","\n","    def load_model(self, path: str):\n","        try:\n","            self.best_model.load_state_dict(torch.load(path))\n","        except Exception as e:\n","            print(f\"Не удалось загрузить модель. Ошибка {e}\")\n","            exit(1)\n","\n","        return True\n","\n","    def fit(self, train_dataset, valid_dataset):\n","        device = torch.device(self.device)\n","        NerualNet = self.start_model\n","        NerualNet.to(device)\n","\n","        NerualNet.train()\n","\n","        self.optimizer = optim.Adam(NerualNet.parameters(), lr=0.0001)\n","\n","        train_loader = DataLoader(dataset=train_dataset, batch_size=self.batch_size,\n","                                  shuffle=False, drop_last=True)\n","        valid_loader = DataLoader(dataset=valid_dataset, batch_size=self.batch_size,\n","                                  shuffle=False, drop_last=True)\n","\n","        best_val_loss = float('inf')  # Лучшее значение функции потерь на валидационной выборке\n","\n","        best_ep = 0  # Эпоха, на которой достигалось лучшее значение функции потерь на валидационной выборке\n","\n","        for epoch in range(self.num_epochs):\n","            start = dt.datetime.now()\n","            mean_loss = 0\n","            batch_n = 0\n","            for batch in train_loader:\n","                y_truth = batch[\"label\"].float().to(device)\n","                text_input_ids = batch[\"text_input_ids\"].to(device)\n","                text_input_mask = batch[\"text_input_mask\"].to(device)\n","                text_segment_ids = batch[\"text_segment_ids\"].to(device)\n","                text_offset_mapping = batch[\"text_offset_mapping\"].to(device)\n","                text_pos = batch[\"text_pos\"].to(device)\n","                def_input_ids = batch[\"def_input_ids\"].to(device)\n","                def_input_mask = batch[\"def_input_mask\"].to(device)\n","                def_segment_ids = batch[\"def_segment_ids\"].to(device)\n","                y_pred = NerualNet(text_input_ids, text_input_mask, text_segment_ids, text_offset_mapping,\n","                                   text_pos, def_input_ids, def_input_mask, def_segment_ids).float()\n","  \n","                loss = self.loss_fn(y_pred, y_truth)\n","                #loss.requires_grad = True\n","        \n","                self.optimizer.zero_grad()\n","                loss.backward()\n","                self.optimizer.step()\n","\n","                del batch\n","                torch.cuda.empty_cache()\n","                gc.collect()\n","\n","                mean_loss += float(loss)\n","                batch_n += 1\n","\n","            mean_loss /= batch_n\n","            self.train_loss.append(mean_loss)\n","            print(f'Эпоха: {epoch + 1}\\n Train loss: {mean_loss}\\n {dt.datetime.now() - start} сек.\\n')\n","\n","            NerualNet.eval()\n","            mean_loss = 0\n","            batch_n = 0\n","            with torch.no_grad():\n","                for batch in valid_loader:\n","                    if self.max_batches_per_epoch is not None:\n","                        if batch_n >= self.max_batches_per_epoch:\n","                            break\n","\n","                target = batch[\"label\"].float().to(device)\n","                text_input_ids = batch[\"text_input_ids\"].to(device)\n","                text_input_mask = batch[\"text_input_mask\"].to(device)\n","                text_segment_ids = batch[\"text_segment_ids\"].to(device)\n","                text_offset_mapping = batch[\"text_offset_mapping\"].to(device)\n","                text_pos = batch[\"text_pos\"].to(device)\n","                def_input_ids = batch[\"def_input_ids\"].to(device)\n","                def_input_mask = batch[\"def_input_mask\"].to(device)\n","                def_segment_ids = batch[\"def_segment_ids\"].to(device)\n","\n","                predicted_values = NerualNet(text_input_ids, text_input_mask, text_segment_ids, text_offset_mapping,\n","                                             text_pos, def_input_ids, def_input_mask, def_segment_ids).float()\n","                \n","                \n","                loss = self.loss_fn(predicted_values, target)\n","\n","                del batch\n","                torch.cuda.empty_cache()\n","                gc.collect()\n","\n","                mean_loss += float(loss)\n","                batch_n += 1\n","\n","            mean_loss /= batch_n\n","            self.valid_loss.append(mean_loss)\n","            print(f'Loss_val: {mean_loss}')\n","\n","            if mean_loss < best_val_loss:\n","                self.best_model = NerualNet\n","                best_val_loss = mean_loss\n","                best_ep = epoch\n","            elif epoch - best_ep > self.early_stopping:\n","                print(f'{self.early_stopping} без улучшений. Прекращаем обучение...')\n","                break\n","            if self.scheduler is not None:\n","                scheduler.step()\n","            print()\n","\n","        print(\"-=-=-=-=-=-=-=-=-=-= Evaluation of the best model =-=-=-=-=-=-=-=-=-=-\")\n","        plt.plot(range(len(self.train_loss)), self.train_loss, color='green', label='train', linestyle='solid')\n","        plt.plot(range(len(self.valid_loss)), self.valid_loss, color='red', label='val', linestyle='solid')\n","        plt.legend()\n","        plt.show()\n","\n","        with torch.no_grad():\n","            y_test = [float(sample['label']) for sample in valid_dataset]\n","            Y_pred = []\n","            Y_pred = [self.best_model(sample['text_input_ids'].unsqueeze(0).to(device), \n","                                      sample['text_input_mask'].unsqueeze(0).to(device),\n","                                      sample['text_segment_ids'].unsqueeze(0).to(device),\n","                                      sample['text_offset_mapping'].unsqueeze(0).to(device),\n","                                      sample['text_pos'].unsqueeze(0).to(device),\n","                                      sample['def_input_ids'].unsqueeze(0).to(device),\n","                                      sample['def_input_mask'].unsqueeze(0).to(device),\n","                                      sample['def_segment_ids'].unsqueeze(0).to(device)) for sample in valid_dataset]\n","            Y_pred = [float(y > 0.5) for y in Y_pred]\n","            print()\n","\n","            print(f\"report: \\n\", classification_report(y_test, Y_pred))"]},{"cell_type":"code","execution_count":6,"id":"c6dd98c1","metadata":{"executionInfo":{"elapsed":602,"status":"ok","timestamp":1677234263638,"user":{"displayName":"y3g0r k","userId":"03339002915347279062"},"user_tz":-180},"id":"c6dd98c1"},"outputs":[],"source":["def data_preparation(texts, definitions, position, labels, tokenizer, max_len):\n","    tokenizer = tokenizer\n","    feautures_X, feautures_Y = [], []\n","\n","    for i, (text, definition) in enumerate(zip(texts, definitions)):\n","        text = tokenizer(text, return_offsets_mapping=True,max_length=max_len,truncation=True,padding='max_length')\n","\n","        text_input_ids = text[\"input_ids\"]\n","        text_input_mask = text[\"attention_mask\"]\n","        text_segment_ids = text[\"token_type_ids\"]\n","        text_offset_mapping = text[\"offset_mapping\"]\n","        text_pos = [position[i]]\n","\n","        definition = tokenizer(definition, return_offsets_mapping=True,max_length=max_len,padding='max_length',truncation=True)\n","\n","        def_input_ids = definition[\"input_ids\"]\n","        def_input_mask = definition[\"attention_mask\"]\n","        def_segment_ids = definition[\"token_type_ids\"]\n","\n","        feautures_X.append([text_input_ids, text_input_mask, text_segment_ids, text_offset_mapping,\n","                            text_pos, def_input_ids, def_input_mask, def_segment_ids])\n","        feautures_Y.append(labels[i])\n","\n","    return feautures_X, feautures_Y"]},{"cell_type":"code","execution_count":7,"id":"4a2096cb","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":577,"status":"ok","timestamp":1677234264982,"user":{"displayName":"y3g0r k","userId":"03339002915347279062"},"user_tz":-180},"id":"4a2096cb","outputId":"391ba3c7-0a90-4c41-9b31-2fef837c3b32"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":7}],"source":["torch.cuda.empty_cache()\n","gc.collect()"]},{"cell_type":"code","execution_count":10,"id":"65dd3b37","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["77afbe9155a2443f89d3ef162b767b77","2eb5fb06f6524f6b8bf43d9744199ae1","5d7d14a61bac475bac9fb3c0303e0161","b78f91c54d6b4461be7f99a9bd0dd364","4d167777455448fc8ee5cac3af334efc","61180ff7f0a94edda0a3d29260b3bc06","4f9b508e83e748e98dae5df33098c6ff","bced9e3fb66a42ce9f167e355f10b8ab","ff031c72e3cc43fe83bc8bb6fa77ce89","fee0bfacc4224a5ca8779803397c32b4","2ca2a1e2c35046afad83f84259b58853","564cae0ca08446a286b4df3f9993b487","e7f1c0c62cc74f1aa9cb34aa122dabdb","3981cca8e2d44970a87f15d44b2b0585","2ce660a7979b43f6b3df6ac1073ca12f","fefad2610e0046b982457729f5099cdf","57ff79a2778347bb80b8a6d08ebb6dc7","a6102b64721441a28bce5e7a2c459a77","df846cc806c740468600e170dffe2256","b7dea14902d544b1914fa91e872e3e39","994dc9bbb96249d197e2a1753269c6e4","6f4dd2dc8b72419581721c666a6d0e3a","1c05f771f97441b490aba801f96024cd","69de82fb37b6402983eec417db32a69c","2f01989fd4e34f7c9b28e0b291b8aa4c","3178e659472345a5b3cbe730e391d637","b71b3e1d6977485e8310a2004c94f924","fddc6de23210497e910f73431e397539","535b256cb9714b5bb5673303e1fda499","268690f121e3493eb59d14109b3ab140","ef98a3bdf2e54a05b66532dd40a2615b","0412d9c45dbf47d0ac5203dfe50fe651","7eeb975aac4e4dd6939d50b80d2d078f","0881802d06fb4a458b7a5477ac4cf7b3","9082cea245124414b25396eefdad3041","b5661afb9aff479aa9d141cd4892e760","51bce764fe3c434683b3eb7954d7acbc","ffa6d82fbf8f4eba8be0ee94cc44777f","b90083b8bb364aea897af601370d0323","f249176362b44980a6d16a56e58af9a5","0798ea005eef4e0085cc8e2a2d2fa17b","2d861043c6ee4992bde30bea077163a2","7951fdedabd346ecb9d43ad0ca698330","d3408e0f606c4f47a937385e3f9a2471","699d1f6ccfea432a91e12660382faf0f","4cd8a07f6eae44979c51e936e4b360ae","db98de35e1c54ed0aa036a845cc7b919","e47060d67fa941b7bc333dce310478b1","345102ad470645699c88199e38bb3c2c","6ef646b0f770410792c40d588e5f487d","d7e92eb5d45548ca908bb07da7a4d2d6","7d56fe5df24f4750911dd50dae429a23","ddf331786f5b40f1b4ffca4707863008","bda6cfc03e904874b935d46a951fc922","509faf67489c4e50bc480a5a10a2fdc1"]},"executionInfo":{"elapsed":6405253,"status":"ok","timestamp":1677240714052,"user":{"displayName":"y3g0r k","userId":"03339002915347279062"},"user_tz":-180},"id":"65dd3b37","outputId":"c097060c-1ca3-4fa0-83be-074630d64074","scrolled":false},"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading (…)okenizer_config.json:   0%|          | 0.00/331 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"77afbe9155a2443f89d3ef162b767b77"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)solve/main/vocab.txt:   0%|          | 0.00/1.78M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"564cae0ca08446a286b4df3f9993b487"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)cial_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1c05f771f97441b490aba801f96024cd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)lve/main/config.json:   0%|          | 0.00/752 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0881802d06fb4a458b7a5477ac4cf7b3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)\"pytorch_model.bin\";:   0%|          | 0.00/1.71G [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"699d1f6ccfea432a91e12660382faf0f"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-678061a4717d>:140: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  embeddings_data = torch.tensor(tokens_embeddings_ex[tokens_key_word_position_ex[0]])\n","<ipython-input-4-678061a4717d>:137: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  embeddings_data = torch.tensor(\n"]},{"output_type":"stream","name":"stdout","text":["Эпоха: 1\n"," Train loss: 0.7964621056811978\n"," 0:02:40.439376 сек.\n","\n","Loss_val: 0.7487003803253174\n","\n","Эпоха: 2\n"," Train loss: 0.6795493858029144\n"," 0:02:36.969017 сек.\n","\n","Loss_val: 0.6674760580062866\n","\n","Эпоха: 3\n"," Train loss: 0.5946322294196698\n"," 0:02:36.730664 сек.\n","\n","Loss_val: 0.6000823974609375\n","\n","Эпоха: 4\n"," Train loss: 0.5351060674046025\n"," 0:02:36.775969 сек.\n","\n","Loss_val: 0.514809250831604\n","\n","Эпоха: 5\n"," Train loss: 0.49104345868332216\n"," 0:02:36.595542 сек.\n","\n","Loss_val: 0.45849621295928955\n","\n","Эпоха: 6\n"," Train loss: 0.4563842707812184\n"," 0:02:36.881466 сек.\n","\n","Loss_val: 0.42659252882003784\n","\n","Эпоха: 7\n"," Train loss: 0.42619344185699115\n"," 0:02:36.819720 сек.\n","\n","Loss_val: 0.4120543599128723\n","\n","Эпоха: 8\n"," Train loss: 0.3991263960347031\n"," 0:02:36.843832 сек.\n","\n","Loss_val: 0.4043257236480713\n","\n","Эпоха: 9\n"," Train loss: 0.3741856705058705\n"," 0:02:36.578579 сек.\n","\n","Loss_val: 0.38783425092697144\n","\n","Эпоха: 10\n"," Train loss: 0.3495787942048275\n"," 0:02:36.726305 сек.\n","\n","Loss_val: 0.3916604518890381\n","\n","Эпоха: 11\n"," Train loss: 0.32743104893450786\n"," 0:02:36.664733 сек.\n","\n","Loss_val: 0.38637539744377136\n","\n","Эпоха: 12\n"," Train loss: 0.30506857123338815\n"," 0:02:36.425282 сек.\n","\n","Loss_val: 0.39132529497146606\n","\n","Эпоха: 13\n"," Train loss: 0.2827554184077966\n"," 0:02:36.619706 сек.\n","\n","Loss_val: 0.39119622111320496\n","\n","Эпоха: 14\n"," Train loss: 0.2609899120800423\n"," 0:02:36.419490 сек.\n","\n","Loss_val: 0.3767052888870239\n","\n","Эпоха: 15\n"," Train loss: 0.23967574160508434\n"," 0:02:36.236443 сек.\n","\n","Loss_val: 0.36861515045166016\n","\n","Эпоха: 16\n"," Train loss: 0.22057734185246505\n"," 0:02:36.328024 сек.\n","\n","Loss_val: 0.36793628334999084\n","\n","Эпоха: 17\n"," Train loss: 0.19958002805107772\n"," 0:02:36.431176 сек.\n","\n","Loss_val: 0.38511210680007935\n","\n","Эпоха: 18\n"," Train loss: 0.1785530485589095\n"," 0:02:36.569085 сек.\n","\n","Loss_val: 0.4058440923690796\n","\n","Эпоха: 19\n"," Train loss: 0.15827312529312842\n"," 0:02:36.627320 сек.\n","\n","Loss_val: 0.39893946051597595\n","\n","Эпоха: 20\n"," Train loss: 0.1398199230169106\n"," 0:02:36.688809 сек.\n","\n","Loss_val: 0.41445279121398926\n","\n","Эпоха: 21\n"," Train loss: 0.12456563869585292\n"," 0:02:36.487749 сек.\n","\n","Loss_val: 0.4279532730579376\n","\n","Эпоха: 22\n"," Train loss: 0.10906624412070019\n"," 0:02:36.671217 сек.\n","\n","Loss_val: 0.4321132004261017\n","\n","Эпоха: 23\n"," Train loss: 0.09703543967557977\n"," 0:02:36.636146 сек.\n","\n","Loss_val: 0.41053342819213867\n","\n","Эпоха: 24\n"," Train loss: 0.0861708734165689\n"," 0:02:36.737015 сек.\n","\n","Loss_val: 0.35167455673217773\n","\n","Эпоха: 25\n"," Train loss: 0.07741003340542918\n"," 0:02:36.527107 сек.\n","\n","Loss_val: 0.3175586462020874\n","\n","Эпоха: 26\n"," Train loss: 0.07087702450878693\n"," 0:02:36.689355 сек.\n","\n","Loss_val: 0.29161137342453003\n","\n","Эпоха: 27\n"," Train loss: 0.06591974219514264\n"," 0:02:36.731857 сек.\n","\n","Loss_val: 0.2697755992412567\n","\n","Эпоха: 28\n"," Train loss: 0.0639619643593\n"," 0:02:36.616553 сек.\n","\n","Loss_val: 0.2981339395046234\n","\n","Эпоха: 29\n"," Train loss: 0.06098588981731522\n"," 0:02:36.469874 сек.\n","\n","Loss_val: 0.3467814326286316\n","\n","Эпоха: 30\n"," Train loss: 0.060242031766760226\n"," 0:02:36.481231 сек.\n","\n","Loss_val: 0.4158256947994232\n","\n","Эпоха: 31\n"," Train loss: 0.056514691349796274\n"," 0:02:36.598403 сек.\n","\n","Loss_val: 0.4885609745979309\n","\n","Эпоха: 32\n"," Train loss: 0.05283161241918652\n"," 0:02:36.485052 сек.\n","\n","Loss_val: 0.39733463525772095\n","\n","Эпоха: 33\n"," Train loss: 0.048707143469440814\n"," 0:02:36.611352 сек.\n","\n","Loss_val: 0.3247738480567932\n","\n","Эпоха: 34\n"," Train loss: 0.0445504457163013\n"," 0:02:36.693033 сек.\n","\n","Loss_val: 0.25442275404930115\n","\n","Эпоха: 35\n"," Train loss: 0.04351066509638019\n"," 0:02:36.432891 сек.\n","\n","Loss_val: 0.20868566632270813\n","\n","Эпоха: 36\n"," Train loss: 0.04088373743632639\n"," 0:02:36.570758 сек.\n","\n","Loss_val: 0.24131666123867035\n","\n","Эпоха: 37\n"," Train loss: 0.034234390349475424\n"," 0:02:36.702365 сек.\n","\n","Loss_val: 0.3171396851539612\n","\n","Эпоха: 38\n"," Train loss: 0.02843702965971045\n"," 0:02:36.614086 сек.\n","\n","Loss_val: 0.5028916597366333\n","\n","Эпоха: 39\n"," Train loss: 0.024903707550791552\n"," 0:02:36.640192 сек.\n","\n","Loss_val: 0.4141559302806854\n","\n","Эпоха: 40\n"," Train loss: 0.02571142246862027\n"," 0:02:36.750676 сек.\n","\n","Loss_val: 0.42981523275375366\n","\n","-=-=-=-=-=-=-=-=-=-= Evaluation of the best model =-=-=-=-=-=-=-=-=-=-\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","report: \n","               precision    recall  f1-score   support\n","\n","         0.0       0.65      0.76      0.70       106\n","         1.0       0.66      0.52      0.58        92\n","\n","    accuracy                           0.65       198\n","   macro avg       0.65      0.64      0.64       198\n","weighted avg       0.65      0.65      0.65       198\n","\n"]}],"source":["\n","\n","\n","df = pd.read_csv('nn_data.csv')\n","df.position = df.position.apply(lambda x: ast.literal_eval(x))\n","\n","max_len_text = df.text.str.len().max()\n","max_len_def = df.definition.str.len().max()\n","\n","max_len = max_len_def\n","if max_len_text > max_len_def:\n","    max_len = max_len_text\n","\n","data_X, data_Y = data_preparation(df.text,\n","                                  df.definition,\n","                                  df.position,\n","                                  df.label,\n","                                  BertTokenizerFast.from_pretrained('sberbank-ai/sbert_large_mt_nlu_ru',\n","                                                                do_lower_case=True),\n","                                  max_len)\n","\n","train_X, test_X, train_Y, test_Y = train_test_split(data_X, data_Y, test_size = 0.2, random_state=42)\n","\n","train_dataset = DisambiguationDataset(train_X, train_Y)\n","test_dataset = DisambiguationDataset(test_X, test_Y)\n","\n","trainer = Trainer(num_epochs=40,\n","                  batch_size=8,\n","                  loss_fn=nn.BCELoss(),\n","                  model=NerualNet(max_seq_len=max_len, device='cuda:0'),\n","                  device='cuda:0')\n","\n","trainer.fit(train_dataset=train_dataset, valid_dataset=test_dataset)"]},{"cell_type":"code","execution_count":null,"id":"9dMNSsbEdLv2","metadata":{"id":"9dMNSsbEdLv2"},"outputs":[],"source":["torch.save(trainer.best_model.state_dict(), \"./modelN.pth\")"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1xlwbmeaSDnM3iv-iODitR1nTFcMT8ygT","timestamp":1677241368864},{"file_id":"1_PE2fRTwXiCH3148EKsStiRFv-N3fpMR","timestamp":1677085018156}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"},"widgets":{"application/vnd.jupyter.widget-state+json":{"77afbe9155a2443f89d3ef162b767b77":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2eb5fb06f6524f6b8bf43d9744199ae1","IPY_MODEL_5d7d14a61bac475bac9fb3c0303e0161","IPY_MODEL_b78f91c54d6b4461be7f99a9bd0dd364"],"layout":"IPY_MODEL_4d167777455448fc8ee5cac3af334efc"}},"2eb5fb06f6524f6b8bf43d9744199ae1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_61180ff7f0a94edda0a3d29260b3bc06","placeholder":"​","style":"IPY_MODEL_4f9b508e83e748e98dae5df33098c6ff","value":"Downloading (…)okenizer_config.json: 100%"}},"5d7d14a61bac475bac9fb3c0303e0161":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_bced9e3fb66a42ce9f167e355f10b8ab","max":331,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ff031c72e3cc43fe83bc8bb6fa77ce89","value":331}},"b78f91c54d6b4461be7f99a9bd0dd364":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fee0bfacc4224a5ca8779803397c32b4","placeholder":"​","style":"IPY_MODEL_2ca2a1e2c35046afad83f84259b58853","value":" 331/331 [00:00&lt;00:00, 4.17kB/s]"}},"4d167777455448fc8ee5cac3af334efc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"61180ff7f0a94edda0a3d29260b3bc06":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4f9b508e83e748e98dae5df33098c6ff":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"bced9e3fb66a42ce9f167e355f10b8ab":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ff031c72e3cc43fe83bc8bb6fa77ce89":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"fee0bfacc4224a5ca8779803397c32b4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2ca2a1e2c35046afad83f84259b58853":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"564cae0ca08446a286b4df3f9993b487":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e7f1c0c62cc74f1aa9cb34aa122dabdb","IPY_MODEL_3981cca8e2d44970a87f15d44b2b0585","IPY_MODEL_2ce660a7979b43f6b3df6ac1073ca12f"],"layout":"IPY_MODEL_fefad2610e0046b982457729f5099cdf"}},"e7f1c0c62cc74f1aa9cb34aa122dabdb":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_57ff79a2778347bb80b8a6d08ebb6dc7","placeholder":"​","style":"IPY_MODEL_a6102b64721441a28bce5e7a2c459a77","value":"Downloading (…)solve/main/vocab.txt: 100%"}},"3981cca8e2d44970a87f15d44b2b0585":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_df846cc806c740468600e170dffe2256","max":1780720,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b7dea14902d544b1914fa91e872e3e39","value":1780720}},"2ce660a7979b43f6b3df6ac1073ca12f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_994dc9bbb96249d197e2a1753269c6e4","placeholder":"​","style":"IPY_MODEL_6f4dd2dc8b72419581721c666a6d0e3a","value":" 1.78M/1.78M [00:00&lt;00:00, 3.23MB/s]"}},"fefad2610e0046b982457729f5099cdf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"57ff79a2778347bb80b8a6d08ebb6dc7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a6102b64721441a28bce5e7a2c459a77":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"df846cc806c740468600e170dffe2256":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b7dea14902d544b1914fa91e872e3e39":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"994dc9bbb96249d197e2a1753269c6e4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6f4dd2dc8b72419581721c666a6d0e3a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1c05f771f97441b490aba801f96024cd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_69de82fb37b6402983eec417db32a69c","IPY_MODEL_2f01989fd4e34f7c9b28e0b291b8aa4c","IPY_MODEL_3178e659472345a5b3cbe730e391d637"],"layout":"IPY_MODEL_b71b3e1d6977485e8310a2004c94f924"}},"69de82fb37b6402983eec417db32a69c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fddc6de23210497e910f73431e397539","placeholder":"​","style":"IPY_MODEL_535b256cb9714b5bb5673303e1fda499","value":"Downloading (…)cial_tokens_map.json: 100%"}},"2f01989fd4e34f7c9b28e0b291b8aa4c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_268690f121e3493eb59d14109b3ab140","max":112,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ef98a3bdf2e54a05b66532dd40a2615b","value":112}},"3178e659472345a5b3cbe730e391d637":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0412d9c45dbf47d0ac5203dfe50fe651","placeholder":"​","style":"IPY_MODEL_7eeb975aac4e4dd6939d50b80d2d078f","value":" 112/112 [00:00&lt;00:00, 2.91kB/s]"}},"b71b3e1d6977485e8310a2004c94f924":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fddc6de23210497e910f73431e397539":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"535b256cb9714b5bb5673303e1fda499":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"268690f121e3493eb59d14109b3ab140":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ef98a3bdf2e54a05b66532dd40a2615b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"0412d9c45dbf47d0ac5203dfe50fe651":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7eeb975aac4e4dd6939d50b80d2d078f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0881802d06fb4a458b7a5477ac4cf7b3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_9082cea245124414b25396eefdad3041","IPY_MODEL_b5661afb9aff479aa9d141cd4892e760","IPY_MODEL_51bce764fe3c434683b3eb7954d7acbc"],"layout":"IPY_MODEL_ffa6d82fbf8f4eba8be0ee94cc44777f"}},"9082cea245124414b25396eefdad3041":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b90083b8bb364aea897af601370d0323","placeholder":"​","style":"IPY_MODEL_f249176362b44980a6d16a56e58af9a5","value":"Downloading (…)lve/main/config.json: 100%"}},"b5661afb9aff479aa9d141cd4892e760":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0798ea005eef4e0085cc8e2a2d2fa17b","max":752,"min":0,"orientation":"horizontal","style":"IPY_MODEL_2d861043c6ee4992bde30bea077163a2","value":752}},"51bce764fe3c434683b3eb7954d7acbc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7951fdedabd346ecb9d43ad0ca698330","placeholder":"​","style":"IPY_MODEL_d3408e0f606c4f47a937385e3f9a2471","value":" 752/752 [00:00&lt;00:00, 21.2kB/s]"}},"ffa6d82fbf8f4eba8be0ee94cc44777f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b90083b8bb364aea897af601370d0323":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f249176362b44980a6d16a56e58af9a5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0798ea005eef4e0085cc8e2a2d2fa17b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2d861043c6ee4992bde30bea077163a2":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"7951fdedabd346ecb9d43ad0ca698330":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d3408e0f606c4f47a937385e3f9a2471":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"699d1f6ccfea432a91e12660382faf0f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_4cd8a07f6eae44979c51e936e4b360ae","IPY_MODEL_db98de35e1c54ed0aa036a845cc7b919","IPY_MODEL_e47060d67fa941b7bc333dce310478b1"],"layout":"IPY_MODEL_345102ad470645699c88199e38bb3c2c"}},"4cd8a07f6eae44979c51e936e4b360ae":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6ef646b0f770410792c40d588e5f487d","placeholder":"​","style":"IPY_MODEL_d7e92eb5d45548ca908bb07da7a4d2d6","value":"Downloading (…)&quot;pytorch_model.bin&quot;;: 100%"}},"db98de35e1c54ed0aa036a845cc7b919":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_7d56fe5df24f4750911dd50dae429a23","max":1707796287,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ddf331786f5b40f1b4ffca4707863008","value":1707796287}},"e47060d67fa941b7bc333dce310478b1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bda6cfc03e904874b935d46a951fc922","placeholder":"​","style":"IPY_MODEL_509faf67489c4e50bc480a5a10a2fdc1","value":" 1.71G/1.71G [00:10&lt;00:00, 174MB/s]"}},"345102ad470645699c88199e38bb3c2c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6ef646b0f770410792c40d588e5f487d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d7e92eb5d45548ca908bb07da7a4d2d6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7d56fe5df24f4750911dd50dae429a23":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ddf331786f5b40f1b4ffca4707863008":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"bda6cfc03e904874b935d46a951fc922":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"509faf67489c4e50bc480a5a10a2fdc1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":5}